AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: task manager application using java and spring boot

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Architectures:
      - arm64

Resources:
  TaskMangerClientBucket: # public s3 bucket to host the client
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-task-manager-client"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
            AllowedOrigins:
              - "*"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  TaskManagerClientBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TaskMangerClientBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
              - !Sub "arn:aws:s3:::${TaskMangerClientBucket}/*"

  TaskManagerApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  TaskManagerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TaskManager
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  TaskManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-TaskManagerFunction"
      PackageType: Image
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TaskManagerTable
      Environment:
        Variables:
          TABLE_NAME: !Ref TaskManagerTable
      Events:
        ApiEvents:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref TaskManagerApi

    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: latest

Outputs:
  ApiEndpoint:
    Description: "API endpoint URL for Prod stage"
    Value: !Sub "https://${TaskManagerApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  S3Endpoint:
    Description: "S3 bucket URL"
    Value: !GetAtt TaskMangerClientBucket.WebsiteURL
